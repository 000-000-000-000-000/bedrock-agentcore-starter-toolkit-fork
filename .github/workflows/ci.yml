name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Create virtual environment
      run: uv venv

    - name: Install wheelhouse dependencies
      run: |
        source .venv/bin/activate
        pip install ./wheelhouse/botocore-*.whl
        pip install ./wheelhouse/boto3-*.whl
        pip install ./wheelhouse/bedrock_agentcore-*.whl

    - name: Install package with dev dependencies
      run: |
        source .venv/bin/activate
        pip install -e ".[dev]" --no-deps
        pip install pre-commit pytest mypy ruff

    - name: Run pre-commit hooks
      run: |
        source .venv/bin/activate
        pre-commit run --all-files

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}

    - name: Install wheelhouse dependencies
      run: |
        source .venv/bin/activate
        # Install in correct order
        pip install ./wheelhouse/botocore-*.whl
        pip install ./wheelhouse/boto3-*.whl
        pip install ./wheelhouse/bedrock_agentcore-*.whl

    - name: Install package and test dependencies
      run: |
        source .venv/bin/activate
        # Install package without wheelhouse deps
        pip install -e . --no-deps
        # Install remaining dependencies
        pip install pytest pytest-cov pytest-asyncio moto mock requests httpx \
                    jinja2 prompt-toolkit pydantic pyyaml rich toml typer \
                    typing-extensions uvicorn docstring_parser urllib3

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        pytest tests/ \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --cov-branch \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.10'
      with:
        name: coverage-html-${{ matrix.python-version }}
        path: htmlcov/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Create release pyproject.toml (no wheelhouse)
      run: |
        cp pyproject.toml pyproject.toml.original
        python scripts/prepare-release.py

    - name: Build package
      run: python -m build

    - name: Restore original pyproject.toml
      run: mv pyproject.toml.original pyproject.toml

    - name: Check package
      run: |
        twine check dist/*
        echo "=== Checking wheel contents ==="
        python -m zipfile -l dist/*.whl | head -20
        echo "=== Verifying no wheelhouse ==="
        python -m zipfile -l dist/*.whl | grep wheelhouse && exit 1 || echo "✓ No wheelhouse in package"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Test wheel installation
      run: |
        python -m venv test-env
        source test-env/bin/activate
        pip install dist/*.whl
        python -c "from bedrock_agentcore_starter_toolkit import Runtime; print('✓ Import successful')"
        agentcore --help
